/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateChaosSculptorUserArgs } from "./CreateChaosSculptorUserArgs";
import { UpdateChaosSculptorUserArgs } from "./UpdateChaosSculptorUserArgs";
import { DeleteChaosSculptorUserArgs } from "./DeleteChaosSculptorUserArgs";
import { ChaosSculptorUserFindManyArgs } from "./ChaosSculptorUserFindManyArgs";
import { ChaosSculptorUserFindUniqueArgs } from "./ChaosSculptorUserFindUniqueArgs";
import { ChaosSculptorUser } from "./ChaosSculptorUser";
import { ChaosSculptorUserService } from "../chaosSculptorUser.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ChaosSculptorUser)
export class ChaosSculptorUserResolverBase {
  constructor(
    protected readonly service: ChaosSculptorUserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ChaosSculptorUser",
    action: "read",
    possession: "any",
  })
  async _chaosSculptorUsersMeta(
    @graphql.Args() args: ChaosSculptorUserFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ChaosSculptorUser])
  @nestAccessControl.UseRoles({
    resource: "ChaosSculptorUser",
    action: "read",
    possession: "any",
  })
  async chaosSculptorUsers(
    @graphql.Args() args: ChaosSculptorUserFindManyArgs
  ): Promise<ChaosSculptorUser[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ChaosSculptorUser, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ChaosSculptorUser",
    action: "read",
    possession: "own",
  })
  async chaosSculptorUser(
    @graphql.Args() args: ChaosSculptorUserFindUniqueArgs
  ): Promise<ChaosSculptorUser | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ChaosSculptorUser)
  @nestAccessControl.UseRoles({
    resource: "ChaosSculptorUser",
    action: "create",
    possession: "any",
  })
  async createChaosSculptorUser(
    @graphql.Args() args: CreateChaosSculptorUserArgs
  ): Promise<ChaosSculptorUser> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ChaosSculptorUser)
  @nestAccessControl.UseRoles({
    resource: "ChaosSculptorUser",
    action: "update",
    possession: "any",
  })
  async updateChaosSculptorUser(
    @graphql.Args() args: UpdateChaosSculptorUserArgs
  ): Promise<ChaosSculptorUser | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ChaosSculptorUser)
  @nestAccessControl.UseRoles({
    resource: "ChaosSculptorUser",
    action: "delete",
    possession: "any",
  })
  async deleteChaosSculptorUser(
    @graphql.Args() args: DeleteChaosSculptorUserArgs
  ): Promise<ChaosSculptorUser | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
