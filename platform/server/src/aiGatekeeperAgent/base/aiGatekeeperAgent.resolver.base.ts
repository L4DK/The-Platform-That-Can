/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateAiGatekeeperAgentArgs } from "./CreateAiGatekeeperAgentArgs";
import { UpdateAiGatekeeperAgentArgs } from "./UpdateAiGatekeeperAgentArgs";
import { DeleteAiGatekeeperAgentArgs } from "./DeleteAiGatekeeperAgentArgs";
import { AiGatekeeperAgentFindManyArgs } from "./AiGatekeeperAgentFindManyArgs";
import { AiGatekeeperAgentFindUniqueArgs } from "./AiGatekeeperAgentFindUniqueArgs";
import { AiGatekeeperAgent } from "./AiGatekeeperAgent";
import { AiGatekeeperAgentService } from "../aiGatekeeperAgent.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AiGatekeeperAgent)
export class AiGatekeeperAgentResolverBase {
  constructor(
    protected readonly service: AiGatekeeperAgentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AiGatekeeperAgent",
    action: "read",
    possession: "any",
  })
  async _aiGatekeeperAgentsMeta(
    @graphql.Args() args: AiGatekeeperAgentFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AiGatekeeperAgent])
  @nestAccessControl.UseRoles({
    resource: "AiGatekeeperAgent",
    action: "read",
    possession: "any",
  })
  async aiGatekeeperAgents(
    @graphql.Args() args: AiGatekeeperAgentFindManyArgs
  ): Promise<AiGatekeeperAgent[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AiGatekeeperAgent, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AiGatekeeperAgent",
    action: "read",
    possession: "own",
  })
  async aiGatekeeperAgent(
    @graphql.Args() args: AiGatekeeperAgentFindUniqueArgs
  ): Promise<AiGatekeeperAgent | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AiGatekeeperAgent)
  @nestAccessControl.UseRoles({
    resource: "AiGatekeeperAgent",
    action: "create",
    possession: "any",
  })
  async createAiGatekeeperAgent(
    @graphql.Args() args: CreateAiGatekeeperAgentArgs
  ): Promise<AiGatekeeperAgent> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AiGatekeeperAgent)
  @nestAccessControl.UseRoles({
    resource: "AiGatekeeperAgent",
    action: "update",
    possession: "any",
  })
  async updateAiGatekeeperAgent(
    @graphql.Args() args: UpdateAiGatekeeperAgentArgs
  ): Promise<AiGatekeeperAgent | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AiGatekeeperAgent)
  @nestAccessControl.UseRoles({
    resource: "AiGatekeeperAgent",
    action: "delete",
    possession: "any",
  })
  async deleteAiGatekeeperAgent(
    @graphql.Args() args: DeleteAiGatekeeperAgentArgs
  ): Promise<AiGatekeeperAgent | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
