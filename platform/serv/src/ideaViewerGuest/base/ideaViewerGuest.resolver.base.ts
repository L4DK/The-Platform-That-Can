/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { Public } from "../../decorators/public.decorator";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateIdeaViewerGuestArgs } from "./CreateIdeaViewerGuestArgs";
import { UpdateIdeaViewerGuestArgs } from "./UpdateIdeaViewerGuestArgs";
import { DeleteIdeaViewerGuestArgs } from "./DeleteIdeaViewerGuestArgs";
import { IdeaViewerGuestFindManyArgs } from "./IdeaViewerGuestFindManyArgs";
import { IdeaViewerGuestFindUniqueArgs } from "./IdeaViewerGuestFindUniqueArgs";
import { IdeaViewerGuest } from "./IdeaViewerGuest";
import { IdeaViewerGuestService } from "../ideaViewerGuest.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => IdeaViewerGuest)
export class IdeaViewerGuestResolverBase {
  constructor(
    protected readonly service: IdeaViewerGuestService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @Public()
  @graphql.Query(() => MetaQueryPayload)
  async _ideaViewerGuestsMeta(
    @graphql.Args() args: IdeaViewerGuestFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @Public()
  @graphql.Query(() => [IdeaViewerGuest])
  async ideaViewerGuests(
    @graphql.Args() args: IdeaViewerGuestFindManyArgs
  ): Promise<IdeaViewerGuest[]> {
    return this.service.findMany(args);
  }

  @Public()
  @graphql.Query(() => IdeaViewerGuest, { nullable: true })
  async ideaViewerGuest(
    @graphql.Args() args: IdeaViewerGuestFindUniqueArgs
  ): Promise<IdeaViewerGuest | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => IdeaViewerGuest)
  @nestAccessControl.UseRoles({
    resource: "IdeaViewerGuest",
    action: "create",
    possession: "any",
  })
  async createIdeaViewerGuest(
    @graphql.Args() args: CreateIdeaViewerGuestArgs
  ): Promise<IdeaViewerGuest> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => IdeaViewerGuest)
  @nestAccessControl.UseRoles({
    resource: "IdeaViewerGuest",
    action: "update",
    possession: "any",
  })
  async updateIdeaViewerGuest(
    @graphql.Args() args: UpdateIdeaViewerGuestArgs
  ): Promise<IdeaViewerGuest | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => IdeaViewerGuest)
  @nestAccessControl.UseRoles({
    resource: "IdeaViewerGuest",
    action: "delete",
    possession: "any",
  })
  async deleteIdeaViewerGuest(
    @graphql.Args() args: DeleteIdeaViewerGuestArgs
  ): Promise<IdeaViewerGuest | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
