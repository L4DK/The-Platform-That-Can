/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateIdeaCollaboratorDevArgs } from "./CreateIdeaCollaboratorDevArgs";
import { UpdateIdeaCollaboratorDevArgs } from "./UpdateIdeaCollaboratorDevArgs";
import { DeleteIdeaCollaboratorDevArgs } from "./DeleteIdeaCollaboratorDevArgs";
import { IdeaCollaboratorDevFindManyArgs } from "./IdeaCollaboratorDevFindManyArgs";
import { IdeaCollaboratorDevFindUniqueArgs } from "./IdeaCollaboratorDevFindUniqueArgs";
import { IdeaCollaboratorDev } from "./IdeaCollaboratorDev";
import { User } from "../../user/base/User";
import { IdeaCollaboratorDevService } from "../ideaCollaboratorDev.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => IdeaCollaboratorDev)
export class IdeaCollaboratorDevResolverBase {
  constructor(
    protected readonly service: IdeaCollaboratorDevService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "IdeaCollaboratorDev",
    action: "read",
    possession: "any",
  })
  async _ideaCollaboratorDevsMeta(
    @graphql.Args() args: IdeaCollaboratorDevFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [IdeaCollaboratorDev])
  @nestAccessControl.UseRoles({
    resource: "IdeaCollaboratorDev",
    action: "read",
    possession: "any",
  })
  async ideaCollaboratorDevs(
    @graphql.Args() args: IdeaCollaboratorDevFindManyArgs
  ): Promise<IdeaCollaboratorDev[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => IdeaCollaboratorDev, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "IdeaCollaboratorDev",
    action: "read",
    possession: "own",
  })
  async ideaCollaboratorDev(
    @graphql.Args() args: IdeaCollaboratorDevFindUniqueArgs
  ): Promise<IdeaCollaboratorDev | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => IdeaCollaboratorDev)
  @nestAccessControl.UseRoles({
    resource: "IdeaCollaboratorDev",
    action: "create",
    possession: "any",
  })
  async createIdeaCollaboratorDev(
    @graphql.Args() args: CreateIdeaCollaboratorDevArgs
  ): Promise<IdeaCollaboratorDev> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        inATeam: args.data.inATeam
          ? {
              connect: args.data.inATeam,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => IdeaCollaboratorDev)
  @nestAccessControl.UseRoles({
    resource: "IdeaCollaboratorDev",
    action: "update",
    possession: "any",
  })
  async updateIdeaCollaboratorDev(
    @graphql.Args() args: UpdateIdeaCollaboratorDevArgs
  ): Promise<IdeaCollaboratorDev | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          inATeam: args.data.inATeam
            ? {
                connect: args.data.inATeam,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => IdeaCollaboratorDev)
  @nestAccessControl.UseRoles({
    resource: "IdeaCollaboratorDev",
    action: "delete",
    possession: "any",
  })
  async deleteIdeaCollaboratorDev(
    @graphql.Args() args: DeleteIdeaCollaboratorDevArgs
  ): Promise<IdeaCollaboratorDev | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "inATeam",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldInATeam(
    @graphql.Parent() parent: IdeaCollaboratorDev
  ): Promise<User | null> {
    const result = await this.service.getInATeam(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
