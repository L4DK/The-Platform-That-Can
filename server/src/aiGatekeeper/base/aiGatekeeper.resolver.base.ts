/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateAiGatekeeperArgs } from "./CreateAiGatekeeperArgs";
import { UpdateAiGatekeeperArgs } from "./UpdateAiGatekeeperArgs";
import { DeleteAiGatekeeperArgs } from "./DeleteAiGatekeeperArgs";
import { AiGatekeeperFindManyArgs } from "./AiGatekeeperFindManyArgs";
import { AiGatekeeperFindUniqueArgs } from "./AiGatekeeperFindUniqueArgs";
import { AiGatekeeper } from "./AiGatekeeper";
import { DigitalCustodianAgentFindManyArgs } from "../../digitalCustodianAgent/base/DigitalCustodianAgentFindManyArgs";
import { DigitalCustodianAgent } from "../../digitalCustodianAgent/base/DigitalCustodianAgent";
import { User } from "../../user/base/User";
import { AiGatekeeperService } from "../aiGatekeeper.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AiGatekeeper)
export class AiGatekeeperResolverBase {
  constructor(
    protected readonly service: AiGatekeeperService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AiGatekeeper",
    action: "read",
    possession: "any",
  })
  async _aiGatekeepersMeta(
    @graphql.Args() args: AiGatekeeperFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AiGatekeeper])
  @nestAccessControl.UseRoles({
    resource: "AiGatekeeper",
    action: "read",
    possession: "any",
  })
  async aiGatekeepers(
    @graphql.Args() args: AiGatekeeperFindManyArgs
  ): Promise<AiGatekeeper[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AiGatekeeper, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AiGatekeeper",
    action: "read",
    possession: "own",
  })
  async aiGatekeeper(
    @graphql.Args() args: AiGatekeeperFindUniqueArgs
  ): Promise<AiGatekeeper | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AiGatekeeper)
  @nestAccessControl.UseRoles({
    resource: "AiGatekeeper",
    action: "create",
    possession: "any",
  })
  async createAiGatekeeper(
    @graphql.Args() args: CreateAiGatekeeperArgs
  ): Promise<AiGatekeeper> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        createdBy: {
          connect: args.data.createdBy,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AiGatekeeper)
  @nestAccessControl.UseRoles({
    resource: "AiGatekeeper",
    action: "update",
    possession: "any",
  })
  async updateAiGatekeeper(
    @graphql.Args() args: UpdateAiGatekeeperArgs
  ): Promise<AiGatekeeper | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          createdBy: {
            connect: args.data.createdBy,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AiGatekeeper)
  @nestAccessControl.UseRoles({
    resource: "AiGatekeeper",
    action: "delete",
    possession: "any",
  })
  async deleteAiGatekeeper(
    @graphql.Args() args: DeleteAiGatekeeperArgs
  ): Promise<AiGatekeeper | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [DigitalCustodianAgent], { name: "myAgents" })
  @nestAccessControl.UseRoles({
    resource: "DigitalCustodianAgent",
    action: "read",
    possession: "any",
  })
  async resolveFieldMyAgents(
    @graphql.Parent() parent: AiGatekeeper,
    @graphql.Args() args: DigitalCustodianAgentFindManyArgs
  ): Promise<DigitalCustodianAgent[]> {
    const results = await this.service.findMyAgents(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "createdBy",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldCreatedBy(
    @graphql.Parent() parent: AiGatekeeper
  ): Promise<User | null> {
    const result = await this.service.getCreatedBy(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
