/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AiGatekeeperService } from "../aiGatekeeper.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AiGatekeeperCreateInput } from "./AiGatekeeperCreateInput";
import { AiGatekeeperWhereInput } from "./AiGatekeeperWhereInput";
import { AiGatekeeperWhereUniqueInput } from "./AiGatekeeperWhereUniqueInput";
import { AiGatekeeperFindManyArgs } from "./AiGatekeeperFindManyArgs";
import { AiGatekeeperUpdateInput } from "./AiGatekeeperUpdateInput";
import { AiGatekeeper } from "./AiGatekeeper";
import { DigitalCustodianAgentFindManyArgs } from "../../digitalCustodianAgent/base/DigitalCustodianAgentFindManyArgs";
import { DigitalCustodianAgent } from "../../digitalCustodianAgent/base/DigitalCustodianAgent";
import { DigitalCustodianAgentWhereUniqueInput } from "../../digitalCustodianAgent/base/DigitalCustodianAgentWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AiGatekeeperControllerBase {
  constructor(
    protected readonly service: AiGatekeeperService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AiGatekeeper })
  @nestAccessControl.UseRoles({
    resource: "AiGatekeeper",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async create(
    @common.Body() data: AiGatekeeperCreateInput
  ): Promise<AiGatekeeper> {
    return await this.service.create({
      data: {
        ...data,

        createdBy: {
          connect: data.createdBy,
        },
      },
      select: {
        AIStatus: true,
        createdAt: true,

        createdBy: {
          select: {
            id: true,
          },
        },

        id: true,
        roles: true,
        TasksCompleted: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [AiGatekeeper] })
  @ApiNestedQuery(AiGatekeeperFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AiGatekeeper",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findMany(@common.Req() request: Request): Promise<AiGatekeeper[]> {
    const args = plainToClass(AiGatekeeperFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        AIStatus: true,
        createdAt: true,

        createdBy: {
          select: {
            id: true,
          },
        },

        id: true,
        roles: true,
        TasksCompleted: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AiGatekeeper })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AiGatekeeper",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findOne(
    @common.Param() params: AiGatekeeperWhereUniqueInput
  ): Promise<AiGatekeeper | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        AIStatus: true,
        createdAt: true,

        createdBy: {
          select: {
            id: true,
          },
        },

        id: true,
        roles: true,
        TasksCompleted: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AiGatekeeper })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AiGatekeeper",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async update(
    @common.Param() params: AiGatekeeperWhereUniqueInput,
    @common.Body() data: AiGatekeeperUpdateInput
  ): Promise<AiGatekeeper | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          createdBy: {
            connect: data.createdBy,
          },
        },
        select: {
          AIStatus: true,
          createdAt: true,

          createdBy: {
            select: {
              id: true,
            },
          },

          id: true,
          roles: true,
          TasksCompleted: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AiGatekeeper })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AiGatekeeper",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async delete(
    @common.Param() params: AiGatekeeperWhereUniqueInput
  ): Promise<AiGatekeeper | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          AIStatus: true,
          createdAt: true,

          createdBy: {
            select: {
              id: true,
            },
          },

          id: true,
          roles: true,
          TasksCompleted: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/myAgents")
  @ApiNestedQuery(DigitalCustodianAgentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "DigitalCustodianAgent",
    action: "read",
    possession: "any",
  })
  async findManyMyAgents(
    @common.Req() request: Request,
    @common.Param() params: AiGatekeeperWhereUniqueInput
  ): Promise<DigitalCustodianAgent[]> {
    const query = plainToClass(
      DigitalCustodianAgentFindManyArgs,
      request.query
    );
    const results = await this.service.findMyAgents(params.id, {
      ...query,
      select: {
        agentStatus: true,
        createdAt: true,
        id: true,
        lastActiveTime: true,
        lastError: true,

        MyAiGatekeeper: {
          select: {
            id: true,
          },
        },

        tasksCompleted: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/myAgents")
  @nestAccessControl.UseRoles({
    resource: "AiGatekeeper",
    action: "update",
    possession: "any",
  })
  async connectMyAgents(
    @common.Param() params: AiGatekeeperWhereUniqueInput,
    @common.Body() body: DigitalCustodianAgentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      myAgents: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/myAgents")
  @nestAccessControl.UseRoles({
    resource: "AiGatekeeper",
    action: "update",
    possession: "any",
  })
  async updateMyAgents(
    @common.Param() params: AiGatekeeperWhereUniqueInput,
    @common.Body() body: DigitalCustodianAgentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      myAgents: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/myAgents")
  @nestAccessControl.UseRoles({
    resource: "AiGatekeeper",
    action: "update",
    possession: "any",
  })
  async disconnectMyAgents(
    @common.Param() params: AiGatekeeperWhereUniqueInput,
    @common.Body() body: DigitalCustodianAgentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      myAgents: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
