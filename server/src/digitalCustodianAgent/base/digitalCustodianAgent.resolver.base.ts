/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateDigitalCustodianAgentArgs } from "./CreateDigitalCustodianAgentArgs";
import { UpdateDigitalCustodianAgentArgs } from "./UpdateDigitalCustodianAgentArgs";
import { DeleteDigitalCustodianAgentArgs } from "./DeleteDigitalCustodianAgentArgs";
import { DigitalCustodianAgentFindManyArgs } from "./DigitalCustodianAgentFindManyArgs";
import { DigitalCustodianAgentFindUniqueArgs } from "./DigitalCustodianAgentFindUniqueArgs";
import { DigitalCustodianAgent } from "./DigitalCustodianAgent";
import { AiGatekeeper } from "../../aiGatekeeper/base/AiGatekeeper";
import { DigitalCustodianAgentService } from "../digitalCustodianAgent.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DigitalCustodianAgent)
export class DigitalCustodianAgentResolverBase {
  constructor(
    protected readonly service: DigitalCustodianAgentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DigitalCustodianAgent",
    action: "read",
    possession: "any",
  })
  async _digitalCustodianAgentsMeta(
    @graphql.Args() args: DigitalCustodianAgentFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DigitalCustodianAgent])
  @nestAccessControl.UseRoles({
    resource: "DigitalCustodianAgent",
    action: "read",
    possession: "any",
  })
  async digitalCustodianAgents(
    @graphql.Args() args: DigitalCustodianAgentFindManyArgs
  ): Promise<DigitalCustodianAgent[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DigitalCustodianAgent, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DigitalCustodianAgent",
    action: "read",
    possession: "own",
  })
  async digitalCustodianAgent(
    @graphql.Args() args: DigitalCustodianAgentFindUniqueArgs
  ): Promise<DigitalCustodianAgent | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DigitalCustodianAgent)
  @nestAccessControl.UseRoles({
    resource: "DigitalCustodianAgent",
    action: "create",
    possession: "any",
  })
  async createDigitalCustodianAgent(
    @graphql.Args() args: CreateDigitalCustodianAgentArgs
  ): Promise<DigitalCustodianAgent> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        MyAiGatekeeper: args.data.MyAiGatekeeper
          ? {
              connect: args.data.MyAiGatekeeper,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DigitalCustodianAgent)
  @nestAccessControl.UseRoles({
    resource: "DigitalCustodianAgent",
    action: "update",
    possession: "any",
  })
  async updateDigitalCustodianAgent(
    @graphql.Args() args: UpdateDigitalCustodianAgentArgs
  ): Promise<DigitalCustodianAgent | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          MyAiGatekeeper: args.data.MyAiGatekeeper
            ? {
                connect: args.data.MyAiGatekeeper,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DigitalCustodianAgent)
  @nestAccessControl.UseRoles({
    resource: "DigitalCustodianAgent",
    action: "delete",
    possession: "any",
  })
  async deleteDigitalCustodianAgent(
    @graphql.Args() args: DeleteDigitalCustodianAgentArgs
  ): Promise<DigitalCustodianAgent | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => AiGatekeeper, {
    nullable: true,
    name: "myAiGatekeeper",
  })
  @nestAccessControl.UseRoles({
    resource: "AiGatekeeper",
    action: "read",
    possession: "any",
  })
  async resolveFieldMyAiGatekeeper(
    @graphql.Parent() parent: DigitalCustodianAgent
  ): Promise<AiGatekeeper | null> {
    const result = await this.service.getMyAiGatekeeper(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
